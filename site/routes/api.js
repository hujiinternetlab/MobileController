
exports.taxonomy = {
    "Server": "A Burgers server. A websockets servers that serves Controllers and Clients",
    "Client": "A Burgers client. A web page containing a game that uses the Burgers library.",
    "Controller": "A Burgers Controller. A web page to be used by a mobile phone that's used as a controller for a game.",
    "User": "The term User and Controller is used interchangably, but specifically a controller to the client is a user. Otherwise it is\
            just a controller.",
    "Room": "A group of users in the server and client. Can be created by Client.",
    "Ticket": "A ticket is a unique ID string generated by the server. A user can join a room only with a valid ticket"
};


exports.docs = {
    "Server": {
        "Server.startServer(port [, listen])": {
            description: "Start a Burgers server listening on port 'port'. \
                         Call 'listen' function when server starts listening.",
            code:   ["var s = require('burgers-server');",
                     "s.startServer(8080, function() {",
                     "   console.log(\"Burgers server started, listening on 8080\");",
                     "});"]        
        }
    },
    "Client": {
        "Client.setServer(address, port)": {
            description: "Sets the address and port of the Burgers server to use in all subsequent function calls.",
            code: ["Client.setServer(\"example.com\", 90210);"]
        },
        "Client.openRoom(connection, join [, userLimit [, password]])": {
            description: "Creates a new room in the server with maximum 'userLimit' users and 'password' for password.\
                          Calls 'connection' with the room ID as the first parameter onces a connection successful \
                          connection has been established. Calls join with the user ID and the room ID once a controller joins the room.",
            code: [ "var roomID;",
                    "var connection = function(roomID) {",
                    "   console.log(\"Created a new room \" + roomID + \" in the server.\");",
                    "};",
                    "",
                    "var join = function(userID, roomID) {",
                    "   console.log(\"Controller \" + userID + \" has joined the room \" + roomID);",
                    "};",
                    "Client.openRoom(connection, join);"]
        },
        "Client.handleUserInput(button [, userID])": {
            description: ["Assigns a user input handler function 'button'. If 'userID' specified,\
                    'button' will be called only on input from 'userID' controller. If 'userID' is not specified\
                    'button' is called on any user input.",
                    "'button' is called with an inputEvent object with the properties: 'userID', 'id', 'msgType' and 'data'.\
                    'userID' is the sending user's ID, 'id' is the button's id, 'msgType' is the type of the button, it can be:\
                    'button', 'gyroscope' or 'joystick'.",
                    "In case 'msgType' is 'button', data holds one boolean property 'pressed'. A true value means it's pressed a false value\
                    means otherwise.",
                    "In case 'msgType' is 'gyroscope', data holds three number properties: 'alpha', 'beta' and 'gamma'. 'alpha' is the value in\
                    degrees around the 'up' axis (like a compass). 'beta' is the value in degrees around the axis of the phone's 'side' axis\
                    (imagine the longer right side of the phone pointing direction). 'gamma' is the phone's 'forward' axis, (imagine the shorter\
                    upper side of the phone pointing direction).",
                    "In case 'msgType' is 'joystick', data holds two number properties, 'dx' and 'dy' each are floating point numbers ranging\
                    between -1 and 1. 'dx' corresponds to the X axis. Right is the positive direction. 'dy' corresponds to the Y axis, up is the\
                    positive direction."],
            code: [
                    "Client.handleUserInput(function(eventInput) {",
                    "    if (inputEvent.msgType === \"button\") {",
                    "        if (inputEvent.data.pressed) {",
                    "            console.log(\"Button is pressed\")",
                    "        } else {",
                    "            console.log(\"Button is depressed\")",
                    "        }",
                    "    } else if (inputEvent.msgType === \"gyroscope\"){",
                    "        console.log(inputEvent.data.alpha, inputEvent.data.beta, inputEvent.data.gamma);",
                    "    } else if (inputEvent.msgType === \"joystick\"){",
                    "        console.log(inputEvent.data.dx, inputEvent.data.dy);",
                    "    }",                    
                    "});"]

        },
        "Client.handleRoomInput(button [, roomID])": {
            description: "Assigns an input handler function 'button', the same as Client.handleUserInput only 'roomID' scopes the 'button' callback\
                        only for controllers in that room."
        },
        "Client.handleUserDisconnection(disconnect [, roomID])": {
            description: "On user disconnection from the server, 'disconnect' is called. If 'roomID' is specified,\
                    'disconnect' will be called only on disconnection from 'roomID' room. If room 'roomID' isn't assigned with\
                    a disconnection handler - the global disconnection handler is called (if assigned)."
        },
        "Client.sendData(roomID, userID, data)": {
            description: "Sends custom data to 'userID' in 'roomID'. 'data' can be any javascript object."
        },
        "Client.broadcastData(data [, roomID])": {
            description: "Sends custom data to every user in 'roomID' (or all users if not defined). 'data' can be any valid JSON object."
        },
        "Client.kickUser(roomID, userID)": {
            description: "Disconnects user 'userID' from room 'roomID'."
        },
        "Client.getTicket(roomID, receiveTicket)": {
            description: "Request a <a href=\"#ticket-definition\">ticket</a>\
                    from the server. Calls 'receiveTicket' with the ticket string as the parameter."
        },
        "Client.getQRCode(url [, size])": {
            description: "Returns a string of an image tag with the 'url' as QRCode, and optionally the QRCode's size.\
                           (A size of 2 or 3 is fine)"
        },
        "Client.closeRoom(roomID, close)": {
            description: "Closes the room in the server. Calls 'room' function once the room was closed in the server."
        }
    },
    "Controller": {
        "Controller.setServer(address, port)": {
            description: "Sets the Burgers server hostname ('address') and listening port 'port'."

        },
        "Controller.startController(join, ticket [, password])": {
            description: "Joins the room which 'ticket' corresponds to (see Client.getTicket()). Calls join once controller\
                joins the room. Optionally, pass in 'password' if server requires a password."
                // Expand on join function
        },
        "Controller.disconnect()": {
            description: "Disconnects the current connection to the server."
        },
        "Controller.sendCustomData(data [, id])": {
            description: "Send server a custom object 'data', with an optional number id of 'id'. If no 'id' is specified 'id' = 0"
        },
        "Controller.handleData(dataEventFunc)": {
            description: "Handle data sent from client using Client.sendData() and Client.broadcastData(). \
                    'dataEventFunc' is called with the data object as parameter."
        },
        "Controller.sendPrivateData(userID , data)": {
            description: "Send private data object 'data' to another controller. Doesn't pass through Client, server sends it directly\
                to 'userID'"
        },
        "Controller.handlePrivateData(getDataEventFunc)": {
            description: "Calls 'getDataEventFunc' with 2 parameters: The first is the data object, and the second is the user ID number."
        },
        "Controller.activateGyroscope(sensitivity)": {
            description: "After this function is called, controller page starts sending the device's orientation data.\
                (See Client.handleControllerInput())"
        },
        "Controller.disableGyroscope()": {
            description: "After this function is called, controller page stops sending device's orientation data."
        },
        "Controller.activateAccelerometer(sensitivity)": {
            description: "After this function is called, controller page starts sending the device's acceleration data.\
                (See Client.handleControllerInput())"
        },
        "Controller.disableAccelerometer()": {
            description: "After this function is called, controller page stops sending device's acceleration data."
        },
        "Controller.Button": {
            description: ""
        },
        "Controller.Joystick": {
            description: ""
        }
    }
};

