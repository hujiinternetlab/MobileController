extends layout

block styles
    link(rel="stylesheet", href="styles/documentation.css")

block content
    div#content
        h1 Getting Started  
        div.section-header Table of Contents
        div.section
            ul.contents-table
                li: a.ref(href="#welcome") Welcome
                li: a.ref(href="#what-is-the-mc-library") What Is the Mobile Controller Library?
                li: a.ref(href="#how-does-it-work") How Does It Work?
                li: a.ref(href="#what-is-it-made-of") What Is It Made of?
                    ul.contents-table
                        li: a.ref(href="#the-server") The Server
                        li: a.ref(href="#the-client") The Client
                        li: a.ref(href="#the-controller") The Controller
                li: a.ref(href="#mc-library-limitations") Mobile Controller Library Limitations
                li: a.ref(href="#an-example") An Example
                    ul.contents-table
                        li: a.ref(href="#in-the-client") In the Client
                        li: a.ref(href="#in-the-controller") In the Controller
                li: a.ref(href="#installing-server") Installing and Running a Mobile Controller Server

        div.section-header#welcome Welcome
        div.section          
            p.
                Hello and welcome fellow developer! This page is here to help you get started using the Mobile Controller library.
            p.
                You need a fair understaning of javascript and web development, and a little 
                <a href="http://nodejs.org/">node.js</a>. 
                If you want to learn how to make a web game, this is not the 
                place to start.

        div.section-header#what-is-the-mc-library What Is the Mobile Controller Library?
        div.section
            p.
                The Mobile Controller library makes it easier on you to develop web based games that utilize the player's mobile phone, Android or IPhone, as an
                advanced customized controller. The client side (browser) part of Mobile Controller does not depend on any other library, and a player does not 
                need to install anything on her phone in order to start playing your game. It is recommended that the player has a QR reader on her
                phone and a modern browser. See the section on <a class="ref" href="#mc-library-limitations">limitations</a>.

        div.section-header#how-does-it-work How Does It Work?
        div.section
            p.
                The Mobile Controller library relies on the HTML5 technology <a href="http://en.wikipedia.org/wiki/WebSocket">Websockets</a> 
                for communication between your web game and the player's phone. 
                With a running Websockets server, the game's web page is able to receive controller input that is sent from the phone through the 
                server and then to the game's web page. The controller is just another web page, so your game's controller can look and behave as
                you want it to.

        div.section-header#what-is-it-made-of What Is It Made of?
        div.section
            p.
                The Mobile Controller library is constituted from three parts: A server, a client and a controller. All are separate javascript files.

            div.sub-section-header#the-server The Server
            div.sub-section
                p.
                    The server part, "mc-server.js", as its name implies, is a <a href="http://www.nodejs.org">node.js</a> module 
                    and it runs on the server. It is a websocket server that transfers the
                    communication between a mobile phone (a controller), and the web page where the game is at (a client). A single server can serve multiple
                    different clients. A single client can group controllers (or "users") into "rooms" which makes it easier on a game to handle large amounts
                    of users. For instance, a card game with multiple tables which the player can choose to join.

            div.sub-section-header#the-client The Client
            div.sub-section
                p.
                    The client part, "mc-client.js", is a client-side javascript that takes care of initial negotiation between the controller and server; opens
                    rooms and assign controllers to rooms. Controllers are assigned to rooms using "tickets", which are unique strings generated by the server.
                    More on that later.

            div.sub-section-header#the-controller The Controller
            div.sub-section
                p.
                    The controller part, "mc-controller.js", is also a client-side javascript that allows the phone to send button data to the server. Also, controllers
                    are capable of communicating custom data, and also privately between themselves without notifiying the client.

        div.section-header#mc-library-limitations Mobile Controller Library Limitations
        div.section
            p.
                (TODO: latency, mobile  and desktop browsers capabilities)
        div.section-header#an-example An Example
        div.section
            p.
                Here I'll show you some code to give an idea how to incorporate Mobile Controller into your game. Let's start with the client side.
            div.sub-section-header#in-the-client In the Client
            div.sub-section
                div.code
                    div #{"// game.js"}
                    div Client.setServer("myhost.com", 8081);
                    div Client.openRoom(connection, join, disconnection);
                p.
                    The above code is the code in our game that will connect player's phone to our game. The file "game.js" is included in the html
                    file after we've included "client.js" from the Mobile Controller library. We first set our client's server host address, and port with 
                    <a class="ref" href="/api#Client-setServer"><code>Client.setServer</code></a>.
                    Lets assume that a Mobile Controller server is running at address "myhost.com" on port 8081. Secondly, we create a new room in the server with the function 
                    <a class="ref" href="/api#Client-openRoom"><code>Client.openRoom</code></a>. 
                    Its first parameter is a function that is called onces a connection to the server has been established. Here it is:
                div.code
                    div #{"// game.js"}
                    div var myRoomID = null;
                    div var connection = function(roomID) {
                    div     myRoomID = roomID;
                    div     Client.getTicket(roomID, ticket);
                    div };
                p.
                    With <code>connection</code> we get our game's room ID. We could open even more rooms using the same method, but for now we'll stick with just one. 
                    After we're connected to the server we would like to enable the player to immediatly start playing. To do that we need to direct him
                    to open up a web page that we made as part of the game, to act as the controller. But even before that we need to get a "ticket" from the
                    server. A "ticket" is a unique string identifier that allows the controller to join a specific room; in this example, to join the room with 
                    id <code>roomID</code>. To do that we call <a class="ref" href="/api#Client-getTicket"><code>Client.getTicket</code></a> 
                    with the room ID that we'd like the user to join and a callback function that will be called
                    with the ticket as its parameter. 
                    Lets take a look at <code>ticket</code> function:
                div.code
                    div #{"//"} game.js
                    div var ticket = function(uniqueID) {
                    div     var controllerURL = "http://mygamesite.com/controller.html?ticket=" + uniqueID;
                    div  
                    div     #{"//"} The first (terrible) option:
                    div     $("#urlDiv").text("Go here: " + controllerURL);
                    div  
                    div     #{"//"} The second (better) option:
                    div     var imageTag = Client.getQRCode(controllerURL);
                    div     var imageElement = $(imageTag);
                    div     $("#qrcodeDiv").append(imageElement);
                    div };
                p.
                    The <code>ticket</code> function is called once the server sends us (the client) a ticket - a unique string identifier. Now we're left with the task to direct
                    the player to the controller web page. Now remember, the controller web page can only join a room with a ticket so we need to somehow
                    make the player launch the controller web page with that ticket information. One way we could do that is with a url query string, as the
                    example above does. We attach the controller url "http://mygamesite.com/controller.html" with the query string "?ticket=&lt;some string here&gt;".
                    Next we need to display that link to the player. Making it a clickable link with an anchor tag won't do any good, as the player needs
                    to open that link in her phone. We can display it, making the player type the whole thing in her phone (which is not very nice), or
                    we can display a QR code for her to scan with her phone, which is far easier and better. We supply the function 
                    <a class="ref" href="/api#Client-getQRCode"><code>Client.getQRCode</code></a>
                    which gets a url string, and returns an image tag string. All we do next is append the image to an 
                    existing div tag in the page. Once the player scans the code, she can open the link in a browser and start playing our game. 
                    Next up, is <code>join</code> function, we supplied that to <a class="ref" href="/api#Client-openRoom"><code>Client.openRoom</code></a>
                    function in the first code segment:
                div.code
                    div #{"// game.js"}
                    div var join = function(userID, roomID) {
                    div     Client.handleUserInput(function (inputEvent) {
                    div         if (inputEvent.buttonType === "button") {
                    div             var isDown = inputEvent.buttonData.pressed;
                    div             var id = inputEvent.buttonData.id;
                    div             if (isDown) {
                    div                 console.log("You pushed the button! id:" + id);
                    div             } else {
                    div                 console.log("You released the button! id:" + id);
                    div             }
                    div         }
                    div     }, userID);
                    div };
                p.
                    The <code>join</code> function is called onces a user has joined a room. It receives the relevant user ID and room ID. 
                    In the example above
                    an input function is immediatly attached. If we were to call 
                    <a class="ref" href="/api#Client-handleUserInput"><code>Client.handleUserInput</code></a>
                    without the second parameter (<code>userID</code>),
                    we would assign a global controller input that would be called for all players in all the rooms we have opened since 
                    the game started.
                    For more information on inputEvent object look at 
                    <a class="ref" href="Client-handleUserInput"><code>Client.handleUserInput</code></a>.
            div.sub-section-header#in-the-controller In the Controller
            div.sub-section
                p.
                    Let's look at some controller web page code.
                div.code
                    div #{"// mobile.js"}
                    div var ticket = getTicketFromURL();
                    div Controller.setServer("myhost.com", 8081);
                    div Controller.startController(join, ticket);
                p.
                    OK, now the code is quite similar to the one we started with in the client. First we set our server address and port, 
                    and then we start our controller. All <code>Controller.startController</code> does is trying to connect to the server. 
                    Onces connected it calls <code>join</code>. Lets take a look at <code>join</code>:
                div.code
                    div #{"// mobile.js"}
                    div var join = function(error) {
                    div     if (!error) {
                    div         console.log("Yay! we're connected!");
                    div     } else {
                    div         console.log("Oh noes! Something went wrong: " + error);
                    div     }       
                    div };
                p.
                    If everything goes as planned, join does not get an error string in its parameter, making <code>error</code> undefined. Otherwise
                    it gets an error message telling us what went wrong. Now, lets revise our join function and add a button to our controller:
                div.code
                    div #{"// mobile.js"}
                    div var join = function(error) {
                    div     if (!error) {
                    div         console.log("Yay! we're connected!");
                    div         var buttonID = 0;
                    div         var button = new Client.Button(buttonID);
                    div  
                    div         $("#controllerDiv").append(button.domElement);
                    div         button.init();
                    div     } else {
                    div         console.log("Oh noes! Something went wrong: " + error);
                    div     }       
                    div };
                p.
                    That's it! We've got a controller with a button. <code>button</code> object above has the <code>domElement</code> 
                    property which is an <code>HTMLDivElement</code>.
                    Once <code>button.init</code> is called, our button is ready to be clicked and sends its data to the client. 
                    Once pressed you'll get (in our
                    example) the console message "You pushed the button! id: 0". To learn more on the button and joystick objects and how they
                    can be customized, read about 
                    <a class="ref" href="/api#Controller-Button"><code>Controller.Button</code></a> and 
                    <a class="ref" href="/api#Controller-Joystick"><code>Controller.Joystick</code></a>.

            div.section-header#installing-server Installing and Running a Mobile Controller Server
            div.section
                p.
                    Install the npm package "mc-server":
                div.code.
                    $ npm install mc-server
                p.
                     Then create an "app.js" file with the following content:
                div.code
                    div #{"// app.js"}
                    div require("./server").startServer(8081, function() {
                    div     console.log("Mobile Controller server started listening on 8081");
                    div });
                p.
                    Then run "node app.js". Your server should be running now.
                p.
                    The "mc-server" package depends on "node-uuid" and "websocket" packages. For optimal performance "websocket" module 
                    optionally depends on a C++ compiler and python. On unix environments g++ will do the job. On windows you can install 
                    Visual Studio Express. If you're running a Windows 7 64-bit you should also install the
                    <a href="http://www.microsoft.com/en-us/download/details.aspx?id=3138">windows 7 SDK</a>. For further information visit
                    "websocket" package github repository at 
                    <a href="https://github.com/Worlize/WebSocket-Node">https://github.com/Worlize/WebSocket-Node</a>



                

