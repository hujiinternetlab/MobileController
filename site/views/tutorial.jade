div.section
    div.tutorial
        p.
            Hello and welcome fellow developer!

        div.tutorial-header What is it?
        p.
            The "Burgers" library makes it easier on you to develop web based games that utilize the player's mobile phone, Android or IPhone, as an
            advanced customized controller.

        div.tutorial-header What is it made of?
        p.
            The Burgers library is constituted from three parts: The server, the client and the controller. All are separate javascript files.

        div.tutorial-header The Server
        p.
            The server part, "server.js", as its name implies, is a nodejs module and is run on the server. It is a websocket server that transfers the
            communication between a mobile phone (a controller), and the web page where the game is at (the client). A single server can serve multiple
            different clients. A single client can group controllers (or "users") into 'rooms' which makes it easier on a game to handle large amounts
            of users. For an instane, a card game with multiple groups of players.

        div.tutorial-header The Client
        p.
            The client part, "client.js", is a client-side javascript that takes care of initial negotiation between the controller and server; opens
            rooms and assign controllers to rooms. Controllers are assigned to rooms using "tickets", which are unique strings generated by the server.
            More on that later.

        div.tutorial-header The Controller
        p.
            The controller part, "controller.js", is also a client-side javascript that allows the phone to send button data to the server. Also, controllers
            are capable of communicating custom data, and also privately between themselves without notifiying the client.
        div.tutorial-header An Example
        p.
            Let's look at at some code. We'll start with the actual game code.
        div.code
            div #{"// game.js"}
            div Client.setServer("myhost.com", 8081);
            div Client.openRoom(connection, join);
        p.
            The above code is the code in our game that will connect player's phone to our game. The file "game.js" is included in the html
            file after we've included "client.js" from the Burgers library. We first set our client's server host address, and port with Client.setServer.
            Lets assume that a Burgers server is running at address "myhost.com" on port 8081. Secondly, we create a new room in the server with the function 
            "Client.openRoom". Its first parameter is a function that is called onces a connection to the server has been established. Here it is:
        div.code
            div #{"// game.js"}
            div var myRoomID = null;
            div var connection = function(roomID) {
            div     myRoomID = roomID;
            div     Client.getTicket(roomID, ticket);
            div };
        p.
            With "connection" we got our game's room ID. We could open even more rooms using the same method, but for now we'll stick with just one. 
            After we're connected to the server we would like to enable the player to immediatly start playing. To do that we need to direct him
            to open up a web page that we made as part of the game, to act as the controller. But even before that we need to get a "ticket" from the
            server. A "ticket" is a unique string identifier that allows the controller to join a room. In this example, to join the room with 
            id 'roomID'. To do that we call Client.getTicket with the roomID that we'd like the user to join and a callback function that will be called
            with the ticket as its parameter. 
            Lets take a look at the "ticket" function:
        div.code
            div #{"//"} game.js
            div var ticket = function(uniqueID) {
            div     var controllerURL = "http://mygamesite.com/controller.html?ticket=" + uniqueID;
            div  
            div     #{"//"} The first (terrible) option:
            div     $("#urlDiv").text("Go here: " + controllerURL);
            div  
            div     #{"//"} The second (better) option:
            div     var imageTag = Client.getQRCode(controllerURL);
            div     var imageElement = $(imageTag);
            div     $("#qrcodeDiv").append(imageElement);
            div };
        p.
            The ticket function is called once the server sent us (the client) a ticket - a unique string ID. Now we're left with the task to direct
            the player to the controller web page. Now remember, the controller web page can only join a room with a ticket so we need to somehow
            make the player launch the controller web page with that ticket information. One way we could do that is with a url query string, as the
            example above does. We attach the controller url ("http://mygamesite.com/controller.html") with the query string "?ticket=&lt;some string here&gt;".
            Next we need to display that link to the player. Making it a clickable link with an anchor tag won't do any good, as the player needs
            to open that link in her phone. We can display it, making the player type the whole thing in her phone (which is not very nice), or
            we can display a QR code for her to scan with her phone. Which is far easier and better. We supply the function Client.getQRCode 
            which gets a url string, and returns an image tag string. All we do next is append the image to an existing div tag in the page. Once the
            player scans the code, she can open the link in a browser and start playing our game. But first let's stay with our game code.
        p.
            Next up, is the "join" function, we supplied that to Client.openRoom function:
        div.code
            div #{"// game.js"}
            div var join = function(userID, roomID) {
            div     Client.handleUserInput(function (inputEvent) {
            div         if (inputEvent.buttonType === "button") {
            div             var isDown = inputEvent.buttonData.pressed;
            div             var id = inputEvent.buttonData.id;
            div             if (isDown) {
            div                 console.log("You pushed the button! id:" + id);
            div             } else {
            div                 console.log("You released the button! id:" + id);
            div             }
            div         }
            div     }, userID);
            div };
        p.
            The join function is called onces a user has joined a room. It receives the relevant user ID and room ID. In the example above
            an input function is immediatly attached. If we were to call Client.handleUserInput without the second parameter (userID),
            we would assign a global controller input that would be called for all players in all the rooms we have opened since the game started.
            For more information on inputEvent object look at Client.handleUserInput.
        p.
            Let's look at some controller page code.
        div.code
            div #{"// mobile.js"}
            div var ticket = getTicketFromURL();
            div Controller.setServer("myhost.com", 8081);
            div Controller.startController(join, ticket);
        p.
            OK, now the code is quite similar to the one we started with in "game.js". First we set our server address and port, 
            and then we start our controller. All Controller.startController does is trying to connect to the server. 
            Onces connected it calls "join". Lets take a look at "join":
        div.code
            div #{"// mobile.js"}
            div var join = function(error) {
            div     if (!error) {
            div         console.log("Yay! we're connected!");
            div     } else {
            div         console.log("Oh noes! Something went wrong: " + error);
            div     }       
            div };
        p.
            If everything goes as planned, join does not get an error string in its parameter, making error variable undefined. Otherwise
            it gets an error message telling us what went wrong. Now, lets revise our join function and add a button to our controller:
        div.code
            div #{"// mobile.js"}
            div var join = function(error) {
            div     if (!error) {
            div         console.log("Yay! we're connected!");
            div         var buttonID = 0;
            div         var button = new Client.Button(buttonID);
            div  
            div         $("#controllerDiv").append(button.domElement);
            div         button.init();
            div     } else {
            div         console.log("Oh noes! Something went wrong: " + error);
            div     }       
            div };
        p.
            That's it! We've got a controller with a button. "button" object above has the domElement property which is a HTMLDivElement.
            Once button.init() is called, button is ready to be clicked and sends its data to the client. Once pressed you'll get (in our
            example) the console message "You pushed the button! id: 0". To learn more on the button and joystick elements and how they
            can be customized, read about Controller.Button and Controller.Joystick.
        div.tutorial-header Installing and starting a Burgers Server
        p.
            "server.js" is node.js module that has two dependencies specified in its "package.json" file. Put those two files in the same folder,
            make sure you have the following installed: node.js, npm and python and a c++ compiler. If you're on a windows machine that'll be a
            visual studio installing (express works fine), and windows 7 SDK if you're on windows 7 64 bit machine. On Unix machines you'll just need
            a c++ compiler, (GNU compilers work fine). Once you have all of these, run "npm install" in the folder. Add the following to a new 
            javascript file named "app.js"
        div.code
            div #{"// app.js"}
            div require("./server").startServer(8081, function() {
            div     console.log("Burgers server started listening on 8081");
            div });
        p.
            And run "node app.js". Your server should be running now.
