extends layout

block styles
    link(rel="stylesheet", href="styles/documentation.css")

block content
    div#content
        h1 API
        div.section-header Table of Contents
        div.section
            ul.contents-table
                li: a.ref(href="#Taxonomy") Taxonomy
                li: a.ref(href="#Server") Server
                    ul.contents-table
                        li: a.ref(href="#Server-startServer") Server.startServer
                li: a.ref(href="#Client") Client
                    ul.contents-table
                        li: a.ref(href="#Client-setServer") Client.setServer
                        li: a.ref(href="#Client-openRoom") Client.openRoom
                        li: a.ref(href="#Client-handleUserInput") Client.handleUserInput
                        li: a.ref(href="#Client-handleRoomInput") Client.handleRoomInput
                        li: a.ref(href="#Client-handleUserDisconnection") Client.handleUserDisconnection
                        li: a.ref(href="#Client-broadcastData") Client.broadcastData
                        li: a.ref(href="#Client-disconnectUser") Client.disconnectUser
                        li: a.ref(href="#Client-getTicket") Client.getTicket
                        li: a.ref(href="#Client-getQRCode") Client.getQRCode
                        li: a.ref(href="#Client-closeRoom") Client.closeRoom
                li: a.ref(href="#Controller") Controller
                    ul.contents-table
                        li: a.ref(href="#Controller-setServer") Controller.setServer
                        li: a.ref(href="#Controller-startController") Controller.startController
                        li: a.ref(href="#Controller-disconnect") Controller.disconnect
                        li: a.ref(href="#Controller-sendCustomData") Controller.sendCustomData
                        li: a.ref(href="#Controller-handleData") Controller.handleData
                        li: a.ref(href="#Controller-sendPrivateData") Controller.sendPrivateData
                        li: a.ref(href="#Controller-handlePrivateData") Controller.handlePrivateData
                        li: a.ref(href="#Controller-activateGyroscope") Controller.activateGyroscope
                        li: a.ref(href="#Controller-disableGyroscope") Controller.disableGyroscope
                        li: a.ref(href="#Controller-activateAccelerometer") Controller.activateAccelerometer
                        li: a.ref(href="#Controller-disableAccelerometer") Controller.disableAccelerometer
                        li: a.ref(href="#Controller-Button") Controller.Button
                        li: a.ref(href="#Controller-Joystick") Controller.Joystick
        div#Taxonomy.section-header Taxonomy
        div.section
            dl
                dt Server
                dd A Mobile Controller server. A websockets servers that serves Controllers and Clients

                dt Client
                dd A Mobile Controller client. A web page containing a game that uses the Mobile Controller library.

                dt Controller
                dd A Mobile Controller Controller. A web page to be used by a mobile phone that's used as a controller for a game.

                dt User
                dd 
                    |The term User and Controller is used interchangably, but specifically a controller to the client is a user. Otherwise it is
                    |just a controller.

                dt Room
                dd A group of users in the server and client. Can be created by Client.

                dt#ticket-definition Ticket
                dd A ticket is a unique ID string generated by the server. A user can join a room only with a valid ticket

        div#Server.section-header Server
        div.section
            div.sub-section-header#Server-startServer
                |Server.startServer(port [, listen])
            div.sub-section
                p.
                    Sets the address and port of the Mobile Controller server to use in all subsequent function calls.
                div.code.
                    var s = require('burgers-server');
                    s.startServer(8080, function() {
                       console.log(\"Mobile Controller server started, listening on 8080\");
                    });      

        div#Client.section-header Client
        div.section
            div.sub-section-header#Client-setServer
                |Client.setServer(address, port)
            div.sub-section
                p.
                    Sets the address and port of the Mobile Controller server to use in all subsequent function calls.
                div.code.
                    Client.setServer(\"example.com\", 90210);

            div.sub-section-header#Client-openRoom
                |Client.openRoom(connection, join, disconnection [, userLimit [, password]])
            div.sub-section
                p.
                    Creates a new room in the server with maximum <code>userLimit</code> users and <code>password</code> for password.
                    A <code>userLimit</code> of <code>0</code> means unlimited users.
                    Calls <code>connection</code> with the room ID as the first parameter onces a 
                    connection has been established. Calls join with the user ID and the room ID once a controller joins the room. When 
                    a connection to a room is lost, closed or failed <code>disconnection</code> is called with the room ID as the 
                    parameter. (TODO: when does disconnection called?)
                div.code.
                    var roomID;
                    var connection = function(roomID) {
                       console.log(\"Created a new room \" + roomID + \" in the server.\");
                    };
                    
                    var join = function(userID, roomID) {
                       console.log(\"Controller \" + userID + \" has joined the room \" + roomID);
                    };
                    Client.openRoom(connection, join);

            div.sub-section-header#Client-handleUserInput
                |Client.handleUserInput(button [, userID])
            div.sub-section
                p.
                    Assigns a user input handler function <code>button</code>. If <code>userID</code> specified,
                    <code>button</code> will be called only on input from <code>userID</code> controller. If <code>userID</code> is not specified
                    <code>button</code> is called on any user input.
                p.
                    <code>button</code> is called with an "InputEvent" object as its parameter:
                div.code.
                    var inputEvent = {
                        userID: (number) // The sending user's ID.
                        id: (number) // The button's ID
                        msgType: (string) // The button's type
                        data: (object) // An object containing button information, depends on msgType
                    }
                p.
                    <code>msgType</code> can be one of five strings: "button", "joystick", "gyroscope", "accelerometer" or "custom".
                p.
                    If <code>msgType</code> is "button", data is:
                div.code.
                    var data = {
                        pressed: (boolean) // Whether the button is pressed or not
                    }
                p.
                    If <code>msgType</code> is "joystick", data is:
                div.code.
                    var data = {
                        dx: (number) // Rangine from -1 to 1, where the positive direction is right.
                        dy: (number) // Ranging from -1 to 1, where the positive direction is up.
                    }
                p.
                    If <code>msgType</code> is "gyroscope", data is:
                div.code.
                    var data = {
                        alpha: (number) // Value in degrees of the phone's rotation around
                                        // the phone's "up" axis (like a compass).

                        beta: (number)  // Value in degrees around the axis of the phone's rotation around 
                                        // its "side" axis (imagine the longer right side of the phone pointing direction).

                        gamma: (number) // Value in degrees of the phones rotation around its "forward" axis, (imagine the shorter
                                        // upper side of the phone pointing direction).
                    }
                p.
                    If <code>msgType</code> is "accelerometer", data is:
                div.code.
                    var data = {
                        alpha: (number) // Value in degrees of the phone's rotation <i>velocity</i> around
                                        // the phone's "up" axis (like a compass).

                        beta: (number)  // Value in degrees around the axis of the phone's rotation <i>velocity</i> around 
                                        // its "side" axis (imagine the longer right side of the phone pointing direction).

                        gamma: (number) // Value in degrees of the phones rotation <i>velocity</i> around its "forward" axis, 
                                        // (imagine the shorter upper side of the phone pointing direction).
                    }
                p.
                    If <code>msgType</code> is "custom", data is whever you sent with 
                    <a class="ref" href="/api#Controller-sendCustomData"><code>Controller.sendCustomData</code></a>.

                p.
                    An example:
                div.code.
                    Client.handleUserInput(function(eventInput) {
                        if (inputEvent.msgType === "button") {
                            if (inputEvent.data.pressed) {
                                console.log("Button is pressed")
                            } else {
                                console.log("Button is depressed")
                            }
                        } else if (inputEvent.msgType === "gyroscope") {
                            console.log(inputEvent.data.alpha, inputEvent.data.beta, inputEvent.data.gamma);
                        } else if (inputEvent.msgType === "joystick") {
                            console.log(inputEvent.data.dx, inputEvent.data.dy);
                        }
                    });

            div.sub-section-header#Client-handleRoomInput
                |Client.handleRoomInput(button [, roomID])
            div.sub-section
                p.
                    Assigns an input handler function <code>button</code>, the same as 
                    <a class="ref" href="#Client-handleUserInput"><code>Client.handleUserInput</code></a>
                    only <code>roomID</code> scopes the <code>button</code> callback only for controllers in that room.

            div.sub-section-header#Client-handleUserDisconnections
                |Client.handleUserDisconnection(disconnect [, roomID])
            div.sub-section
                p.
                    On user disconnection from the server <code>disconnect</code> is called. If <code>roomID</code> is specified
                    <code>disconnect</code> will be called only on disconnection from <code>roomID</code> room. If room <code>roomID</code>
                    isn't assigned with a disconnection handler - the global disconnection handler is called (if assigned).

            div.sub-section-header#Client-sendData
                |Client.sendData(roomID, userID, data)
            div.sub-section
                p.
                    Sends custom data to user <code>userID</code> in room <code>roomID</code>. <code>data</code> can be any javascript object.

            div.sub-section-header#Client-broadcastData
                |Client.broadcastData(data [, roomID])
            div.sub-section
                p.
                    Sends custom data to every user in room <code>roomID</code> (or all users if not defined). 
                    <code>data</code> can be any valid JSON object.

            div.sub-section-header#Client-disconnectUser
                |Client.disconnectUser(roomID, userID)
            div.sub-section
                p.
                    Disconnects user <code>userID</code> from room <code>roomID</code>.

            div.sub-section-header#Client-getTicket
                |Client.getTicket(roomID, receiveTicket)
            div.sub-section
                p.
                    Request a <a class="ref" href="#ticket-definition">ticket</a>
                    from the server. Calls <code>receiveTicket</code> with the ticket string as the parameter.

            div.sub-section-header#Client-getQRCode
                |Client.getQRCode(url [, size])
            div.sub-section
                p.
                    Returns a string of an image tag with the string <code>url</code> as QRCode, and optionally the QRCode's size.
                    (A size of 2 or 3 is fine)

            div.sub-section-header#Client-closeRoom
                |Client.closeRoom(roomID)
            div.sub-section
                p.
                    Closes the room in the server.

        div#Controller.section-header Controller
        div.section
            div.sub-section-header#Controller-setServer
                |Controller.setServer(address, port)
            div.sub-section
                p.
                    Sets the Mobile Controller server hostname <code>address</code> and listening port <code>port</code>.
            
            div.sub-section-header#Controller-startController
                |Controller.startController(join, ticket [, password])
            div.sub-section
                p.
                    Joins the room which <code>ticket</code> corresponds to 
                    (see <a class="ref" href="#Client-getTicket"><code>Client.getTicket</code></a>). 
                    Calls <code>join</code>
                    once controller successfully connects to the server. Optionally, pass in <code>password</code> string if 
                    server requires a password.
                p.
                    <code>join</code> function receives one string parameter if an error has occured, otherwise it does not
                    (the first parameter will be undefined).
            
            div.sub-section-header#Controller-disconnect
                |Controller.disconnect()
            div.sub-section
                p.
                    Disconnects the current connection to the server.
            
            div.sub-section-header#Controller-sendCustomData
                |Controller.sendCustomData(data [, id])
            div.sub-section
                p.
                    Send server a custom object <code>data</code>, with an optional number <code>id</code>. If <code>id</code> is not specified.
                    The message's id property defaults to zero.
            
            div.sub-section-header#Controller-handleData
                |Controller.handleData(dataEventFunc)
            div.sub-section
                p.
                    Handle data sent from the client using 
                    <a class="ref" href="#Client-sendData"><code>Client.sendData</code></a> or 
                    <a class="ref" href="#Client-broadcastData"><code>Client.broadcastData</code></a>.
                    <code>dataEventFunc</code> is called with the data object as parameter.
            
            div.sub-section-header#Controller-sendPrivateData
                |Controller.sendPrivateData(userID , data)
            div.sub-section
                p.
                    Send private data object <code>data</code> to another controller. Doesn't pass through client, server sends it directly
                    to user <code>userID</code>.
            
            div.sub-section-header#Controller-handlePrivateData
                |Controller.handlePrivateData(getDataEventFunc)
            div.sub-section
                p.
                    Calls <code>getDataEventFunc</code> with 2 parameters: The first is the data object, and the second is the user ID number.
            
            div.sub-section-header#Controller-activateGyroscope
                |Controller.activateGyroscope(sensitivity)
            div.sub-section
                p.
                    After this function is called, controller page starts sending the device's orientation data.
                    See <a class="ref" href="#Client-handleUserInput"><code>Client.handleControllerInput</code></a>.
            
            div.sub-section-header#Controller-disableGyroscope
                |Controller.disableGyroscope()
            div.sub-section
                p.
                    After this function is called, controller page stops sending device's orientation data.
            
            div.sub-section-header#Controller-activateAccelerometer
                |Controller.activateAccelerometer(sensitivity)
            div.sub-section
                p.
                    After this function is called, controller page starts sending the device's acceleration data.
                    See <a class="ref" href="#Client-handleControllerInput"><code>Client.handleControllerInput</code></a>.
            
            div.sub-section-header#Controller-disableAccelerometer
                |Controller.disableAccelerometer()
            div.sub-section
                p.
                    After this function is called, controller page stops sending device's acceleration data.
            
            div.sub-section-header#Controller-Button.
                Controller.Button(id)<br/>
                Controller.Button(id, div)<br/>
                Controller.Button(id, size)                
            div.sub-section
                p.
                    Constructor function. Creates a Button object that contains <code>domElement</code> property 
                    of type HTMLDivElement that can be added to the controller web page. After adding 
                    <code>domElement</code> to the DOM, a call to the method <code>button.init</code> activates 
                    the button. The element will repond to both touch and mouse events.
                div.code.
                    var b = new Controller.Button(12);
                    $("#container").append(b.domElement);
                    b.init();
                p.
                    To allow further customization you can supply your own div element to the constructor, and 
                    custom callbacks on button press and depress to the methods <code>button.ondown</code> and 
                    <code>button.onup</code> respectfully.
                div.code.
                    var b = new Controller.Button(12);
                    $("#container").append(b.domElement);
                    b.init();

                    b.ondown(function() {
                        b.domElement.style.background-color = "blue";
                    });

                    b.ondown(function() {
                        b.domElement.style.background-color = "red";
                    });

            div.sub-section-header#Controller-Joystick.
                Controller.Joystick(id)<br/>
                Controller.Joystick(id, baseDiv, stickDiv)<br/>
                Controller.Joystick(id, baseSize [, stickSize])
            div.sub-section
                p.
                    Constructor function. Creates a Joystick object that contains a <code>domElement</code>
                    property of type HTMLDivElement that can be added to the controller web page. After adding
                    <code>domElement</code> to the DOM, a call to the method <code>joystick.init</code> activates
                    the joystick and it responds to touch and mouse events.
                p.
                    The joystick is made of two divs, a "base" div and a "stick" div. The base div is static, and when
                    a player drags across it, the stick div follows and data is transferred to the server. The motion of
                    the stick div is limited to the base div.
                div.code.
                    var j = new Controller.Joystick(7);
                    $("#container").append(j.domElement);
                    j.init();
                p.
                    For further customization you can supply your own base and stick divs to the constructor, and supply
                    custom callback functions on joystick press, release and drag events with the methods,
                    <code>joystick.ondown</code>, <code>joystick.onup</code> and <code>joystick.onmove</code> 
                    respectfully. The <code>onmove</code> callback is called with the <code>dx</code> and <code>dy</code> values that
                    the joystick is about to send to the server.
                p.
                    You can further access the divs and make further customizations though the <code>domElement</code> property.
                    <code>domElement</code> is the base div and its only child div is the stick div.
                div.code.
                    var j = new Controller.Joystick(7);
                    $("#container").append(j.domElement);
                    j.init();
                    var baseDiv = j.domElement;
                    var stickDiv = $(j.domElement).children()[0];

